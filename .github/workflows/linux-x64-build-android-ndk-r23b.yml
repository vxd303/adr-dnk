name: linux-x64-build-android-ndk-r23b (libamice.so via clang-r416183c1)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      AMICE_DIR: ${{ github.workspace }}/amice
      OUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/clang-r416183c1
      # Unstripped clang r416183c1 (LLVM 12)
      CLANG_UNSTRIPPED_URL: https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/c3260b409f13d92f8c9f4795420238694c529352/clang-r416183c1.tar.gz

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Checkout amice source
        uses: actions/checkout@v4
        with:
          repository: fuqiuluo/amice
          ref: master
          path: amice

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (amice)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.AMICE_DIR }}/target-llvm12
          key: ${{ runner.os }}-cargo-amice-${{ hashFiles('amice/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-amice-

      - name: Prepare folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR" "$CLANG_DIR"

      - name: Download unstripped Clang r416183c1 (LLVM 12)
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "$CLANG_UNSTRIPPED_URL" -o /tmp/clang-r416183c1.tar.gz
          tar -xzf /tmp/clang-r416183c1.tar.gz -C "$CLANG_DIR"
          "$CLANG_DIR/bin/clang++" --version || true
          ls -l "$CLANG_DIR/lib"  || true
          ls -l "$CLANG_DIR/lib64"|| true

      - name: Normalize LLVM dylib name (handle libLLVM-12git.so)
        shell: bash
        run: |
          set -euo pipefail
          FOUND="$(find "$CLANG_DIR" -maxdepth 3 -type f -name 'libLLVM-12*.so' | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            echo "libLLVM-12*.so not found under $CLANG_DIR"
            find "$CLANG_DIR" -maxdepth 3 -name 'libLLVM*.so' -ls || true
            exit 1
          fi
          LIBDIR="$(dirname "$FOUND")"
          BASENAME="$(basename "$FOUND")"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM-12.so"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM.so"
          ls -l "$LIBDIR"/libLLVM*.so

          {
            echo "LLVM_SYS_120_PREFIX=$CLANG_DIR"
            echo "LD_LIBRARY_PATH=$LIBDIR"
            echo "LIBRARY_PATH=$LIBDIR"
            echo "PATH=$CLANG_DIR/bin:${PATH}"
            echo "CC=$CLANG_DIR/bin/clang"
            echo "CXX=$CLANG_DIR/bin/clang++"
            echo "CXXFLAGS=-fno-rtti -fno-exceptions -std=c++17 -DLLVM_VERSION_MAJOR=12"
          } >> "$GITHUB_ENV"

          if [ -x "$CLANG_DIR/bin/llvm-config" ]; then
            echo "LLVM_CONFIG_PATH=$CLANG_DIR/bin/llvm-config" >> "$GITHUB_ENV"
          fi

      - name: Use clang + ld.lld as Rust linker
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "RUSTFLAGS=-C linker=$CLANG_DIR/bin/clang -C link-arg=-fuse-ld=lld"
            echo "CARGO_TARGET_DIR=${{ env.AMICE_DIR }}/target-llvm12"
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CLANG_DIR/bin/clang"
          } >> "$GITHUB_ENV"

      - name: Patch for LLVM 12 (guard NoProfile enum)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          if [ -f "$f" ]; then
            tmp="${f}.tmp"
            awk '
              /ENUM_CASE\(llvm::Attribute::NoProfile, NoProfile\)/ {
                print "#if defined(LLVM_VERSION_MAJOR) && LLVM_VERSION_MAJOR >= 14";
                print $0;
                print "#endif";
                next
              }
              { print }
            ' "$f" > "$tmp"
            mv "$tmp" "$f"
            grep -n "NoProfile" "$f" || true
          fi

          # Luôn reset lại ffi.cc về upstream để tránh sót patch lần trước
      - name: Reset ffi.cc to upstream
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          git checkout -- amice-llvm/cpp/ffi.cc
          echo "[OK] restored amice-llvm/cpp/ffi.cc"

      # LLVM<13: cung cấp đủ 2 symbol của SimplifyCFG (zero-arg & new overload),
      # mọi thứ ở GLOBAL SCOPE, không đặt namespace trong thân hàm.
      - name: Patch (LLVM12 CFGSimplify shim via echo; global-scope only)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"

          # 1) xoá mọi forward-decl/gọi overload rỗng cũ (nếu upstream có)
          sed -i '/FunctionPass[[:space:]]*\*[[:space:]]*createCFGSimplificationPass[[:space:]]*( *);/d' "$f" || true
          sed -i 's/::llvm::createCFGSimplificationPass()[[:space:]]*;/amice_cfgshim_call();/g' "$f" || true

          # 2) chèn shim mới ở GLOBAL SCOPE (marker AMICE_CFGSIMPLIFY_SHIM_V2)
          {
            echo '#if !defined(AMICE_CFGSIMPLIFY_SHIM_V2)'
            echo '#define AMICE_CFGSIMPLIFY_SHIM_V2 1'
            echo '#include <functional>'
            echo 'namespace llvm { class Function; class FunctionPass; struct SimplifyCFGOptions; }'
            echo '#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR < 13)'
            echo 'namespace llvm {'
            echo '  FunctionPass *createCFGSimplificationPass('
            echo '    unsigned /*Threshold*/,'
            echo '    bool /*ForwardSwitchCond*/,'
            echo '    bool /*ConvertSwitch*/,'
            echo '    bool /*KeepLoops*/,'
            echo '    bool /*SinkCommon*/,'
            echo '    std::function<bool(const ::llvm::Function &)> /*Ftor*/);'
            echo '}'
            echo '#endif'
            echo ''
            echo '// Helper thực thi — không có namespace trong thân hàm'
            echo 'static ::llvm::FunctionPass *amice_cfgshim_call();'
            echo ''
            echo '// Xuất symbol zero-arg (LLVM>=13 có thể tham chiếu):'
            echo 'extern "C" ::llvm::FunctionPass* amice_cfgsimplify_zero()'
            echo '  asm("_ZN4llvm27createCFGSimplificationPassEv");'
            echo ''
            echo '// Xuất symbol overload mới (SimplifyCFGOptions, Predicate):'
            echo 'extern "C" ::llvm::FunctionPass* amice_cfgsimplify_new('
            echo '  ::llvm::SimplifyCFGOptions,'
            echo '  std::function<bool(::llvm::Function const&)>)'
            echo '  asm("_ZN4llvm27createCFGSimplificationPassENS_18SimplifyCFGOptionsESt8functionIFbRKNS_8FunctionEEE");'
            echo ''
            echo 'static ::llvm::FunctionPass *amice_cfgshim_call() {'
            echo '#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR >= 13)'
            echo '  #include "llvm/Transforms/Scalar.h"'
            echo '  #include "llvm/Transforms/Utils/SimplifyCFGOptions.h"'
            echo '  ::llvm::SimplifyCFGOptions Opts = ::llvm::SimplifyCFGOptions();'
            echo '  return ::llvm::createCFGSimplificationPass(Opts, nullptr);'
            echo '#else'
            echo '  // LLVM 12: chỉ có biến thể 6 tham số'
            echo '  return ::llvm::createCFGSimplificationPass('
            echo '    /*Threshold*/1, /*ForwardSwitchCond*/false,'
            echo '    /*ConvertSwitch*/false, /*KeepLoops*/true,'
            echo '    /*SinkCommon*/false, /*Ftor*/nullptr);'
            echo '#endif'
            echo '}'
            echo ''
            echo '::llvm::FunctionPass* amice_cfgsimplify_zero() {'
            echo '  return amice_cfgshim_call();'
            echo '}'
            echo ''
            echo '::llvm::FunctionPass* amice_cfgsimplify_new('
            echo '  ::llvm::SimplifyCFGOptions,'
            echo '  std::function<bool(::llvm::Function const&)>) {'
            echo '  return amice_cfgshim_call();'
            echo '}'
            echo '#endif // AMICE_CFGSIMPLIFY_SHIM_V2'
          } >> "$f"

          echo "==== Tail ffi.cc (after shim) ===="
          tail -n 120 "$f" || true

      # STUB LLVMIsTypeAttribute cho LLVM<13 (dùng echo để tránh lỗi YAML)
      - name: Patch for LLVM 12 (stub LLVMIsTypeAttribute for LLVM<13)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          {
            echo '#if defined(LLVM_VERSION_MAJOR) && LLVM_VERSION_MAJOR < 13'
            echo 'extern "C" {'
            echo '  typedef struct LLVMOpaqueAttributeRef *LLVMAttributeRef;'
            echo '  typedef int LLVMBool;'
            echo '  LLVMBool LLVMIsTypeAttribute(LLVMAttributeRef /*A*/) {'
            echo '    return 0;'
            echo '  }'
            echo '}'
            echo '#endif'
          } >> "$f"

           # LLVM<13: Cấp symbol overload mới bằng shim; gọi trực tiếp symbol zero-arg cũ qua tên mangled.
      - name: Append LLVM12 shim for createCFGSimplificationPass overload into ffi.cc
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          # Tránh chèn trùng khi re-run
          if grep -q '_ZN4llvm27createCFGSimplificationPassEv' "$f" && grep -q 'amice_cfg_simplify_shim' "$f"; then
            echo "Shim already present, skipping"
            exit 0
          fi

          {
            echo '#if defined(LLVM_VERSION_MAJOR) && LLVM_VERSION_MAJOR < 13'
            echo '#include <functional>'
            echo '#include "llvm/Transforms/Scalar.h"'
            echo 'namespace llvm {'
            echo '  struct SimplifyCFGOptions;'
            echo '  class Function;'
            echo '  class FunctionPass;'
            echo '}'
            echo ''
            echo '// Trỏ trực tiếp tới symbol zero-arg có sẵn trong LLVM12:'
            echo 'extern "C" ::llvm::FunctionPass* amice_old_cfgsimplify()'
            echo '  asm("_ZN4llvm27createCFGSimplificationPassEv");'
            echo ''
            echo '// Tạo symbol overload mới (LLVM>=13) bằng đúng mangled name,'
            echo '// thân shim chỉ forward sang symbol zero-arg cũ để tránh thiếu symbol khi load plugin.'
            echo 'extern "C" ::llvm::FunctionPass* amice_cfg_simplify_shim('
            echo '    ::llvm::SimplifyCFGOptions,'
            echo '    std::function<bool(::llvm::Function const&)>)'
            echo '    asm("_ZN4llvm27createCFGSimplificationPassENS_18SimplifyCFGOptionsESt8functionIFbRKNS_8FunctionEEE");'
            echo ''
            echo '::llvm::FunctionPass* amice_cfg_simplify_shim('
            echo '    ::llvm::SimplifyCFGOptions,'
            echo '    std::function<bool(::llvm::Function const&)>) {'
            echo '  return amice_old_cfgsimplify();'
            echo '}'
            echo '#endif'
          } >> "$f"

          echo "== Preview tail of ffi.cc =="
          tail -n 120 "$f" || true
          
      - name: Build libamice.so (feature llvm12-0)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          cargo clean
          cargo build --release --no-default-features --features llvm12-0
          mkdir -p "$OUT_DIR"
          cp -v target-llvm12/release/libamice.so "$OUT_DIR/"

      - name: Smoke test:load plugin with this clang
        shell: bash
        run: |
          set -euo pipefail
          export LD_LIBRARY_PATH="$LD_LIBRARY_PATH"
          echo 'int main(){return 0;}' > /tmp/t.c
          "$CLANG_DIR/bin/clang" -fpass-plugin="$OUT_DIR/libamice.so" -O2 -xc /tmp/t.c -o /tmp/t

      - name: Upload artifact (libamice.so for clang-r416183c1)
        uses: actions/upload-artifact@v4
        with:
          name: libamice-ndk-r23b-clang-r416183c1
          path: ${{ env.OUT_DIR }}/libamice.so
          if-no-files-found: error
