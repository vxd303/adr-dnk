name: linux-x64-build-android-ndk-r23b (libamice.so via clang-r416183c1)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      AMICE_DIR: ${{ github.workspace }}/amice
      OUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/clang-r416183c1
      CLANG_UNSTRIPPED_URL: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/c3260b409f13d92f8c9f4795420238694c529352/clang-r416183c1.tar.gz"

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Checkout amice source
        uses: actions/checkout@v4
        with:
          repository: fuqiuluo/amice
          ref: master
          path: amice

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (amice)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.AMICE_DIR }}/target-llvm12
          key: ${{ runner.os }}-cargo-amice-${{ hashFiles('amice/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-amice-

      - name: Prepare folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR" "$CLANG_DIR"

      - name: Download unstripped Clang r416183c1 (LLVM 12)
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "$CLANG_UNSTRIPPED_URL" -o /tmp/clang-r416183c1.tar.gz
          tar -xzf /tmp/clang-r416183c1.tar.gz -C "$CLANG_DIR"
          "$CLANG_DIR/bin/clang++" --version || true
          ls -l "$CLANG_DIR/lib"  || true
          ls -l "$CLANG_DIR/lib64" || true

      - name: Normalize LLVM dylib name (handle libLLVM-12git.so)
        shell: bash
        run: |
          set -euo pipefail
          FOUND="$(find "$CLANG_DIR" -maxdepth 3 -type f -name 'libLLVM-12*.so' | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            echo "libLLVM-12*.so not found under $CLANG_DIR"
            find "$CLANG_DIR" -maxdepth 3 -name 'libLLVM*.so' -ls || true
            exit 1
          fi
          LIBDIR="$(dirname "$FOUND")"
          BASENAME="$(basename "$FOUND")"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM-12.so"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM.so"
          ls -l "$LIBDIR"/libLLVM*.so

          {
            echo "LLVM_SYS_120_PREFIX=$CLANG_DIR"
            echo "LD_LIBRARY_PATH=$LIBDIR:${LD_LIBRARY_PATH:-}"
            echo "LIBRARY_PATH=$LIBDIR:${LIBRARY_PATH:-}"
            echo "PATH=$CLANG_DIR/bin:${PATH}"
            echo "CC=$CLANG_DIR/bin/clang"
            echo "CXX=$CLANG_DIR/bin/clang++"
            echo "CXXFLAGS=-fno-rtti -fno-exceptions -std=c++17 -DLLVM_VERSION_MAJOR=12"
            echo "RUSTFLAGS=-C linker=$CLANG_DIR/bin/clang -C link-arg=-fuse-ld=lld"
            echo "CARGO_TARGET_DIR=${{ env.AMICE_DIR }}/target-llvm12"
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CLANG_DIR/bin/clang"
          } >> "$GITHUB_ENV"

          if [ -x "$CLANG_DIR/bin/llvm-config" ]; then
            echo "LLVM_CONFIG_PATH=$CLANG_DIR/bin/llvm-config" >> "$GITHUB_ENV"
          fi

      - name: Reset ffi.cc to upstream
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          git checkout -- amice-llvm/cpp/ffi.cc
          echo "[OK] restored amice-llvm/cpp/ffi.cc"

      - name: Patch ffi.cc (drop LLVMIsTypeAttribute on LLVM<13)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          # Chèn macro ngay đầu file để mọi chỗ dùng đều được thay thế
          awk 'BEGIN{
            print "#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR < 13)"
            print "  // NDK r23b (LLVM 12) không có LLVMIsTypeAttribute trong C-API."
            print "  // Trên LLVM<13, coi như luôn = false để khỏi tạo reference tới symbol."
            print "  #ifndef LLVM_ATTRIBUTE_REF_FWD"
            print "    typedef struct LLVMOpaqueAttributeRef *LLVMAttributeRef;"
            print "    typedef int LLVMBool;"
            print "  #define LLVM_ATTRIBUTE_REF_FWD 1"
            print "  #endif"
            print "  #define LLVMIsTypeAttribute(_A_) 0"
            print "#endif"
          } { print }' "$f" > "$f.tmp" && mv "$f.tmp" "$f"

          echo "Preview header lines:"
          head -n 30 "$f" || true


      - name: Patch ffi.cc (guard Attribute::NoProfile for LLVM<14)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          if grep -q 'ENUM_CASE(llvm::Attribute::NoProfile, NoProfile)' "$f"; then
            awk '
              /ENUM_CASE\(llvm::Attribute::NoProfile, NoProfile\)/ {
                print "#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR >= 14)";
                print $0;
                print "#endif";
                next
              }
              { print }
            ' "$f" > "$f.tmp"
            mv "$f.tmp" "$f"
          fi

      - name: Patch ffi.cc (use CFGSimplify old API for LLVM<13)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"

          # 1) Add helper AMICE_makeCFGSimplify() to the end of the file
          echo '' >> "$f"
          echo '// ===== AMICE CFGSimplify helper (portable across LLVM 12+)' >> "$f"
          echo '#if !defined(AMICE_CFGSIMPLIFY_HELPER)' >> "$f"
          echo '#define AMICE_CFGSIMPLIFY_HELPER 1' >> "$f"
          echo '#include <functional>' >> "$f"
          echo 'namespace llvm { class Function; class FunctionPass; }' >> "$f"
          echo '#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR < 13)' >> "$f"
          echo '// Forward decl for old prototype in LLVM 12 (Scalar.h)' >> "$f"
          echo 'namespace llvm {' >> "$f"
          echo '  FunctionPass* createCFGSimplificationPass(' >> "$f"
          echo '      unsigned /*Threshold*/,' >> "$f"
          echo '      bool /*ForwardSwitchCond*/,' >> "$f"
          echo '      bool /*ConvertSwitch*/,' >> "$f"
          echo '      bool /*KeepLoops*/,' >> "$f"
          echo '      bool /*SinkCommon*/,' >> "$f"
          echo '      std::function<bool(const ::llvm::Function&)> /*Ftor*/);' >> "$f"
          echo '}' >> "$f"
          echo '#endif' >> "$f"
          echo '' >> "$f"
          echo 'static ::llvm::FunctionPass* AMICE_makeCFGSimplify() {' >> "$f"
          echo '#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR >= 13)' >> "$f"
          echo '  #include "llvm/Transforms/Utils/SimplifyCFGOptions.h"' >> "$f"
          echo '  ::llvm::SimplifyCFGOptions Opts{};' >> "$f"
          echo '  return ::llvm::createCFGSimplificationPass(Opts, nullptr);' >> "$f"
          echo '#else' >> "$f"
          echo '  // LLVM 12: call the 6-parameter variant' >> "$f"
          echo '  return ::llvm::createCFGSimplificationPass(' >> "$f"
          echo '      /*Threshold*/1, /*ForwardSwitchCond*/false,' >> "$f"
          echo '      /*ConvertSwitch*/false, /*KeepLoops*/true,' >> "$f"
          echo '      /*SinkCommon*/false, /*Ftor*/nullptr);' >> "$f"
          echo '#endif' >> "$f"
          echo '}' >> "$f"
          echo '#endif // AMICE_CFGSIMPLIFY_HELPER' >> "$f"
          echo '// ===== end helper' >> "$f"

          # 2) Replace all calls to createCFGSimplificationPass(...) with the helper
          sed -E -i 's/::llvm::createCFGSimplificationPass\([^;]*\)/AMICE_makeCFGSimplify()/g' "$f"
          sed -E -i 's/([^:])createCFGSimplificationPass\([^;]*\)/\1AMICE_makeCFGSimplify()/g' "$f"

          echo "== Preview tail of ffi.cc =="
          tail -n 120 "$f" || true

      - name: Build libamice.so (feature llvm12-0)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          cargo clean
          cargo build --release --no-default-features --features llvm12-0
          mkdir -p "$OUT_DIR"
          cp -v target-llvm12/release/libamice.so "$OUT_DIR/"

      - name: Smoke test:load plugin with this clang
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > /tmp/t.c
          "$CLANG_DIR/bin/clang" -fpass-plugin="$OUT_DIR/libamice.so" -O2 -xc /tmp/t.c -o /tmp/t

      - name: Upload artifact (libamice.so for clang-r416183c1)
        uses: actions/upload-artifact@v4
        with:
          name: libamice-ndk-r23b-clang-r416183c1
          path: ${{ env.OUT_DIR }}/libamice.so
          if-no-files-found: error

