name: linux-x64-build-android-ndk-r23b (libamice.so via clang-r416183c1)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      AMICE_DIR: ${{ github.workspace }}/amice
      OUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/clang-r416183c1
      # Unstripped clang r416183c1 (LLVM 12)
      CLANG_UNSTRIPPED_URL: https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/c3260b409f13d92f8c9f4795420238694c529352/clang-r416183c1.tar.gz

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Checkout amice source
        uses: actions/checkout@v4
        with:
          repository: fuqiuluo/amice
          ref: master
          path: amice

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (amice)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.AMICE_DIR }}/target-llvm12
          key: ${{ runner.os }}-cargo-amice-${{ hashFiles('amice/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-amice-

      - name: Prepare folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR" "$CLANG_DIR"

      - name: Download unstripped Clang r416183c1 (LLVM 12)
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "$CLANG_UNSTRIPPED_URL" -o /tmp/clang-r416183c1.tar.gz
          tar -xzf /tmp/clang-r416183c1.tar.gz -C "$CLANG_DIR"
          "$CLANG_DIR/bin/clang++" --version || true
          ls -l "$CLANG_DIR/lib"  || true
          ls -l "$CLANG_DIR/lib64"|| true

      - name: Normalize LLVM dylib name (handle libLLVM-12git.so)
        shell: bash
        run: |
          set -euo pipefail
          FOUND="$(find "$CLANG_DIR" -maxdepth 3 -type f -name 'libLLVM-12*.so' | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            echo "libLLVM-12*.so not found under $CLANG_DIR"
            find "$CLANG_DIR" -maxdepth 3 -name 'libLLVM*.so' -ls || true
            exit 1
          fi
          LIBDIR="$(dirname "$FOUND")"
          BASENAME="$(basename "$FOUND")"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM-12.so"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM.so"
          ls -l "$LIBDIR"/libLLVM*.so

          {
            echo "LLVM_SYS_120_PREFIX=$CLANG_DIR"
            echo "LD_LIBRARY_PATH=$LIBDIR"
            echo "LIBRARY_PATH=$LIBDIR"
            echo "PATH=$CLANG_DIR/bin:${PATH}"
            echo "CC=$CLANG_DIR/bin/clang"
            echo "CXX=$CLANG_DIR/bin/clang++"
            echo "CXXFLAGS=-fno-rtti -fno-exceptions -std=c++17 -DLLVM_VERSION_MAJOR=12"
            echo "CARGO_TARGET_DIR=${{ env.AMICE_DIR }}/target-llvm12"
          } >> "$GITHUB_ENV"

          if [ -x "$CLANG_DIR/bin/llvm-config" ]; then
            echo "LLVM_CONFIG_PATH=$CLANG_DIR/bin/llvm-config" >> "$GITHUB_ENV"
          fi

      - name: Use clang + ld.lld as Rust linker
        shell: bash
        run: |
          set -euo pipefail
          {
            echo "RUSTFLAGS=-C linker=$CLANG_DIR/bin/clang -C link-arg=-fuse-ld=lld"
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CLANG_DIR/bin/clang"
          } >> "$GITHUB_ENV"

      - name: Reset ffi.cc to upstream
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          git checkout -- amice-llvm/cpp/ffi.cc
          echo "[OK] restored amice-llvm/cpp/ffi.cc"

      - name: Inject <cstddef> at top of ffi.cc (fix std::size_t)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          if ! head -n 20 "$f" | grep -q '<cstddef>'; then
            sed -i '1i #include <cstddef>' "$f"
          fi
          head -n 5 "$f"

      - name: Patch for LLVM 12 (guard NoProfile enum)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          tmp="${f}.tmp"
          awk '
            /ENUM_CASE\(llvm::Attribute::NoProfile, NoProfile\)/ {
              print "#if defined(LLVM_VERSION_MAJOR) && LLVM_VERSION_MAJOR >= 14";
              print $0;
              print "#endif";
              next
            }
            { print }
          ' "$f" > "$tmp"
          mv "$tmp" "$f"
          grep -n "NoProfile" "$f" || true

      # ---- SHIM LLVM12: bổ sung cả 2 overload còn thiếu (SimplifyCFGOptions và legacy 6-tham-số) ----
      - name: Inject LLVM12 CFGSimplify shim (2 missing overloads)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          mkdir -p amice-llvm/cpp
          f="amice-llvm/cpp/llvm12_cfgshim.inc"
          : > "$f"
          echo '#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR < 13)' >> "$f"
          echo '#include <functional>' >> "$f"
          echo '#include "llvm/Transforms/Utils/SimplifyCFGOptions.h"' >> "$f"
          echo 'namespace llvm { class Function; class FunctionPass; }' >> "$f"
          echo 'namespace llvm {' >> "$f"
          echo '  FunctionPass *createCFGSimplificationPass(unsigned, bool, bool, bool, bool,' >> "$f"
          echo '      std::function<bool(const ::llvm::Function&)>);' >> "$f"
          echo '}' >> "$f"
          echo '' >> "$f"
          # zero-arg có sẵn trong LLVM12 — dùng để forward:
          echo 'extern "C" ::llvm::FunctionPass* amice_old_cfgsimplify()' >> "$f"
          echo '  asm("_ZN4llvm27createCFGSimplificationPassEv");' >> "$f"
          echo '' >> "$f"
          # Overload mới (LLVM>=13): SimplifyCFGOptions, Predicate
          echo 'extern "C" ::llvm::FunctionPass* amice_cfgsimplify_new(' >> "$f"
          echo '    ::llvm::SimplifyCFGOptions,' >> "$f"
          echo '    std::function<bool(::llvm::Function const&)>)' >> "$f"
          echo '    asm("_ZN4llvm27createCFGSimplificationPassENS_18SimplifyCFGOptionsESt8functionIFbRKNS_8FunctionEEE");' >> "$f"
          echo '' >> "$f"
          echo '::llvm::FunctionPass* amice_cfgsimplify_new(' >> "$f"
          echo '    ::llvm::SimplifyCFGOptions,' >> "$f"
          echo '    std::function<bool(::llvm::Function const&)>) {' >> "$f"
          echo '  return amice_old_cfgsimplify();' >> "$f"
          echo '}' >> "$f"
          echo '' >> "$f"
          # Overload "legacy" mà loader của bạn đang đòi: (unsigned, bool, bool, bool, bool, function)
          echo 'extern "C" ::llvm::FunctionPass* amice_cfgsimplify_legacy(' >> "$f"
          echo '    unsigned, bool, bool, bool, bool,' >> "$f"
          echo '    std::function<bool(::llvm::Function const&)>)' >> "$f"
          echo '    asm("_ZN4llvm27createCFGSimplificationPassEjbbbbSt8functionIFbRKNS_8FunctionEEE");' >> "$f"
          echo '' >> "$f"
          echo '::llvm::FunctionPass* amice_cfgsimplify_legacy(' >> "$f"
          echo '    unsigned, bool, bool, bool, bool,' >> "$f"
          echo '    std::function<bool(::llvm::Function const&)>) {' >> "$f"
          echo '  return amice_old_cfgsimplify();' >> "$f"
          echo '}' >> "$f"
          echo '' >> "$f"
          # LLVM<13 thiếu LLVMIsTypeAttribute trong C-API
          echo 'extern "C" {' >> "$f"
          echo '  typedef struct LLVMOpaqueAttributeRef *LLVMAttributeRef;' >> "$f"
          echo '  typedef int LLVMBool;' >> "$f"
          echo '  LLVMBool LLVMIsTypeAttribute(LLVMAttributeRef) { return 0; }' >> "$f"
          echo '}' >> "$f"
          echo '#endif /* LLVM<13 */' >> "$f"
          ffi="amice-llvm/cpp/ffi.cc"
          if ! grep -q '^#include "llvm12_cfgshim.inc"' "$ffi"; then
            sed -i '1i #include "llvm12_cfgshim.inc"' "$ffi"
          fi
          tail -n 80 "$ffi" || true
          echo "---- shim file ----"
          cat "$f" | sed -n '1,140p'

      - name: Build libamice.so (feature llvm12-0)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          cargo clean
          cargo build --release --no-default-features --features llvm12-0
          mkdir -p "$OUT_DIR"
          cp -v target-llvm12/release/libamice.so "$OUT_DIR/"

      - name: Smoke test:load plugin with this clang
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > /tmp/t.c
          "$CLANG_DIR/bin/clang" -fpass-plugin="$OUT_DIR/libamice.so" -O2 -xc /tmp/t.c -o /tmp/t

      - name: Upload artifact (libamice.so for clang-r416183c1)
        uses: actions/upload-artifact@v4
        with:
          name: libamice-ndk-r23b-clang-r416183c1
          path: ${{ env.OUT_DIR }}/libamice.so
          if-no-files-found: error
