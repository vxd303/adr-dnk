name: linux-x64-build-android-ndk-r23b (libamice.so via clang-r416183c1)

on:
  push:
    branches: [ main, master ]
  pull_request:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-22.04

    env:
      AMICE_DIR: ${{ github.workspace }}/amice
      OUT_DIR: ${{ github.workspace }}/out
      CLANG_DIR: ${{ github.workspace }}/clang-r416183c1
      CLANG_UNSTRIPPED_URL: "https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/+archive/c3260b409f13d92f8c9f4795420238694c529352/clang-r416183c1.tar.gz"

    steps:
      - name: Checkout (this repo)
        uses: actions/checkout@v4

      - name: Checkout amice source
        uses: actions/checkout@v4
        with:
          repository: fuqiuluo/amice
          ref: master
          path: amice

      - name: Setup Rust (stable)
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo (amice)
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            ${{ env.AMICE_DIR }}/target-llvm12
          key: ${{ runner.os }}-cargo-amice-${{ hashFiles('amice/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-amice-

      - name: Prepare folders
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$OUT_DIR" "$CLANG_DIR"

      - name: Download unstripped Clang r416183c1 (LLVM 12)
        shell: bash
        run: |
          set -euo pipefail
          curl -fL "$CLANG_UNSTRIPPED_URL" -o /tmp/clang-r416183c1.tar.gz
          tar -xzf /tmp/clang-r416183c1.tar.gz -C "$CLANG_DIR"
          "$CLANG_DIR/bin/clang++" --version || true
          ls -l "$CLANG_DIR/lib"  || true
          ls -l "$CLANG_DIR/lib64" || true

      - name: Normalize LLVM dylib name (handle libLLVM-12git.so)
        shell: bash
        run: |
          set -euo pipefail
          FOUND="$(find "$CLANG_DIR" -maxdepth 3 -type f -name 'libLLVM-12*.so' | head -n1 || true)"
          if [ -z "$FOUND" ]; then
            echo "libLLVM-12*.so not found under $CLANG_DIR"
            find "$CLANG_DIR" -maxdepth 3 -name 'libLLVM*.so' -ls || true
            exit 1
          fi
          LIBDIR="$(dirname "$FOUND")"
          BASENAME="$(basename "$FOUND")"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM-12.so"
          ln -sf "$BASENAME" "$LIBDIR/libLLVM.so"
          ls -l "$LIBDIR"/libLLVM*.so

          {
            echo "LLVM_SYS_120_PREFIX=$CLANG_DIR"
            echo "LD_LIBRARY_PATH=$LIBDIR:${LD_LIBRARY_PATH:-}"
            echo "LIBRARY_PATH=$LIBDIR:${LIBRARY_PATH:-}"
            echo "PATH=$CLANG_DIR/bin:${PATH}"
            echo "CC=$CLANG_DIR/bin/clang"
            echo "CXX=$CLANG_DIR/bin/clang++"
            echo "CXXFLAGS=-fno-rtti -fno-exceptions -std=c++17 -DLLVM_VERSION_MAJOR=12"
            echo "RUSTFLAGS=-C linker=$CLANG_DIR/bin/clang -C link-arg=-fuse-ld=lld"
            echo "CARGO_TARGET_DIR=${{ env.AMICE_DIR }}/target-llvm12"
            echo "CARGO_TARGET_X86_64_UNKNOWN_LINUX_GNU_LINKER=$CLANG_DIR/bin/clang"
          } >> "$GITHUB_ENV"

          if [ -x "$CLANG_DIR/bin/llvm-config" ]; then
            echo "LLVM_CONFIG_PATH=$CLANG_DIR/bin/llvm-config" >> "$GITHUB_ENV"
          fi

      - name: Reset ffi.cc to upstream
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          git checkout -- amice-llvm/cpp/ffi.cc
          echo "[OK] restored amice-llvm/cpp/ffi.cc"

      - name: Patch ffi.cc (guard Attribute::NoProfile for LLVM<14)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          if grep -q 'ENUM_CASE(llvm::Attribute::NoProfile, NoProfile)' "$f"; then
            awk '
              /ENUM_CASE\(llvm::Attribute::NoProfile, NoProfile\)/ {
                print "#if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR >= 14)";
                print $0;
                print "#endif";
                next
              }
              { print }
            ' "$f" > "$f.tmp"
            mv "$f.tmp" "$f"
          fi

      - name: Create LLVM12 shims (CodeExtractor ctor + LLVMIsTypeAttribute)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          cat > amice-llvm/cpp/llvm12_shims.cc <<'EOF'
          #include <stdint.h>
          #if defined(LLVM_VERSION_MAJOR) && (LLVM_VERSION_MAJOR < 13)
          extern "C" {

          // --- LLVMIsTypeAttribute is missing in LLVM 12 C-API
          #ifndef LLVM_ATTRIBUTE_REF_FWD
          typedef struct LLVMOpaqueAttributeRef *LLVMAttributeRef;
          typedef int LLVMBool;
          #define LLVM_ATTRIBUTE_REF_FWD 1
          #endif
          LLVMBool LLVMIsTypeAttribute(LLVMAttributeRef) { return 0; }

          // --- CodeExtractor new-ctor (with std::string suffix) -> forward to old-ctor (no suffix)
          // old ctor
          void amice_CodeExtractor_C1_old(
              void* self,
              void* arrayRefBB,
              void* DT,
              bool aggregateArgs,
              void* BFI,
              void* BPI,
              void* AC,
              bool allowVarAlloca,
              bool allowAlloca)
              asm("_ZN4llvm13CodeExtractorC1ENS_8ArrayRefIPNS_10BasicBlockEEEPNS_13DominatorTreeEbPNS_18BlockFrequencyInfoEPNS_21BranchProbabilityInfoEPNS_15AssumptionCacheEbb");

          // new ctor (extra std::string at tail) – define symbol and tail-call old
          void _ZN4llvm13CodeExtractorC1ENS_8ArrayRefIPNS_10BasicBlockEEEPNS_13DominatorTreeEbPNS_18BlockFrequencyInfoEPNS_21BranchProbabilityInfoEPNS_15AssumptionCacheEbbNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE(
              void* self,
              void* arrayRefBB,
              void* DT,
              bool aggregateArgs,
              void* BFI,
              void* BPI,
              void* AC,
              bool allowVarAlloca,
              bool allowAlloca,
              void* /*const std::string&*/)
          {
              amice_CodeExtractor_C1_old(self, arrayRefBB, DT, aggregateArgs, BFI, BPI, AC, allowVarAlloca, allowAlloca);
          }

          } // extern "C"
          #endif // LLVM<13
          EOF

      - name: Make build.rs compile llvm12_shims.cc
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          br="amice-llvm/build.rs"
          # Chèn thêm .file("cpp/llvm12_shims.cc") ngay sau .file("cpp/ffi.cc")
          sed -i 's#\.file("cpp/ffi\.cc")#\.file("cpp/ffi.cc")\n        .file("cpp/llvm12_shims.cc")#' "$br"
          echo "== Snippet in build.rs =="
          nl -ba "$br" | sed -n '1,120p'

      - name: (Optional) Soften CodeExtractor call sites (drop suffix literal if present)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          f="amice-llvm/cpp/ffi.cc"
          # Nếu upstream có gọi với ", false, \".split\"" thì bỏ đi cho khớp LLVM12
          sed -i 's/,\s*false\s*,\s*"\.split"//g' "$f" || true

      - name: Build libamice.so (feature llvm12-0)
        shell: bash
        working-directory: ${{ env.AMICE_DIR }}
        run: |
          set -euo pipefail
          cargo clean
          cargo build --release --no-default-features --features llvm12-0
          mkdir -p "$OUT_DIR"
          # amice dùng CARGO_TARGET_DIR đã set -> file ở target-llvm12
          cp -v target-llvm12/release/libamice.so "$OUT_DIR/"

      - name: Smoke test:load plugin with this clang
        shell: bash
        run: |
          set -euo pipefail
          echo 'int main(){return 0;}' > /tmp/t.c
          "$CLANG_DIR/bin/clang" -fpass-plugin="$OUT_DIR/libamice.so" -O2 -xc /tmp/t.c -o /tmp/t

      - name: Upload artifact (libamice.so for clang-r416183c1)
        uses: actions/upload-artifact@v4
        with:
          name: libamice-ndk-r23b-clang-r416183c1
          path: ${{ env.OUT_DIR }}/libamice.so
          if-no-files-found: error
